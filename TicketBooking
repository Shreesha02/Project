import java.util.*;
public class TicketBooking {
	
  static int availableLowerBerths = 12;
	static int availableMiddleBerths = 22;
	static int availableUpperBerths = 26;
	static int availableRacTickets = 15;
	static int availableWaitingList = 10;
  
  static Queue<Integer> waitingList = new LinkedList<>();	   
  static Queue<Integer> racList =  new LinkedList<>();
	    
  static List<Integer> bookedTicketList =  new ArrayList<>();
	    
	    static List<Integer> lowerBerthsPositions = new ArrayList<>(Arrays.asList(1,2,3,4,5,6,7,8,9,10,11,12));
	    static List<Integer> middleBerthsPositions = new ArrayList<>(Arrays.asList(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22));
	    static List<Integer> upperBerthsPositions = new ArrayList<>(Arrays.asList(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26));
	    static List<Integer> racPositions = new ArrayList<>(Arrays.asList(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15));
	    static List<Integer> waitingListPositions = new ArrayList<>(Arrays.asList(1,2,3,4,5,6,7,8,9,10));

	    static Map<Integer, Passenger> passengers = new HashMap<>();   
	    

	    //book ticket
	    public void bookTicket(Passenger p, int berthInfo,String allotedBerth)
	    {
	        
	        p.number = berthInfo;
	        p.alloted = allotedBerth;
	        passengers.put(p.passengerId,p);
	        bookedTicketList.add(p.passengerId);        
	        System.out.println("Your Ticket is Booked Successfully");
	    }

          

			public void addToRAC(Passenger p, int racInfo, String allotedRAC) {
			
				p.number = racInfo; 
		        p.alloted = allotedRAC;
		        passengers.put(p.passengerId,p);
		      
		        racList.add(p.passengerId);
		        
		        availableRacTickets--;
		        racPositions.remove(0);
		    System.out.println("Your ticket is added to RAC Successfully");
		    }
		
public void addToWaitingList(Passenger p,  int waitingListInfo , String allotedWL) {
								p.number = waitingListInfo; 
		        p.alloted = allotedWL;
		        passengers.put(p.passengerId,p);
		        waitingList.add(p.passengerId);
		        availableWaitingList--;
		        waitingListPositions.remove(0);
		        System.out.println("Your ticket is added to WaitingList Successfully");
			}
			
		//cancel ticket
		  public void cancelTicket(int passengerId)
		    {
		        
		        Passenger p = passengers.get(passengerId);
		        passengers.remove(passengerId);
		        passengers.remove(Integer.valueOf(passengerId));
		        
		        bookedTicketList.remove(passengerId);
		        bookedTicketList.remove(Integer.valueOf(passengerId));

		        		        int positionBooked = p.number;
		        System.out.println("Your Ticket cancelled Successfully");
				        if(p.alloted.equals("L")) 
		        { 
		          availableLowerBerths++;
		          lowerBerthsPositions.add(positionBooked);
		        }
		        else if(p.alloted.equals("M"))
		        { 
		          availableMiddleBerths++;
		          middleBerthsPositions.add(positionBooked);
		        }
		        else if(p.alloted.equals("U"))
		        { 
		          availableUpperBerths++;
		          upperBerthsPositions.add(positionBooked);
		        }
		        //check if any RAC is there
		        if(racList.size() > 0)
		        {
		            		            Passenger passengerFromRAC = passengers.get(racList.poll());
		            int positionRac = passengerFromRAC.number;
		            racPositions.add(positionRac);
		            racList.remove(passengerFromRAC.passengerId);
		            racList.remove(Integer.valueOf(passengerFromRAC.passengerId));
		            availableRacTickets++;

		            //check if any WL is there
		            if(waitingList.size()>0)
		            {
		                
		
		                Passenger passengerFromWaitingList = passengers.get(waitingList.poll());
		                int positionWL = passengerFromWaitingList.number;
		                waitingListPositions.add(positionWL);
		                waitingList.remove(passengerFromWaitingList.passengerId);
		                waitingList.remove(Integer.valueOf(passengerFromWaitingList.passengerId));

		                passengerFromWaitingList.number = racPositions.get(0);
		                passengerFromWaitingList.alloted = "RAC";
		                racPositions.remove(0);
		                racList.add(passengerFromWaitingList.passengerId);
		                
		                availableWaitingList++;
		                availableRacTickets--;
		            }
		            		            
		            Train.bookTicket(passengerFromRAC);
		        }
		    
		    }

// Available Tickets
public void printAvailable() {
				{
 System.out.println("Available Lower Berths "  + availableLowerBerths);
 System.out.println("Available Middle Berths "  + availableMiddleBerths);
 System.out.println("Available Upper Berths "  + availableUpperBerths);
 System.out.println("Availabel RACs " + availableRacTickets);
 System.out.println("Available Waiting List " + availableWaitingList);
				        
  }	
	}


// Booked Tickets
public void printPassenger() {
				// TODO Auto-generated method stub
	 if(passengers.size() == 0)
	   {
		System.out.println("No details of passengers");
		return;
          }
	for(Passenger p : passengers.values())
		{
		System.out.println("PASSENGER ID " + p.passengerId );
		System.out.println(" TrainName"+ p.trainName);
		System.out.println(" Depature"+ p.depature);
		System.out.println(" Destination"+ p.destination);    
		System.out.println(" Name " + p.name );
    System.out.println(" Gender " + p.gender );
	  System.out.println(" Age " + p.age );
	  System.out.println(" Status " + p.number + p.alloted);	
	  System.out.println("--------------------------------");
		}
	}

}	


